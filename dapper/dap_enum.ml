(* WARN autogenerated - do not modify by hand *)

module Source_presentationHint_enum = struct
  type t = Normal | Emphasize | Deemphasize

  let enc =
    let open Data_encoding in
    conv
      (function
        | Normal -> "normal"
        | Emphasize -> "emphasize"
        | Deemphasize -> "deemphasize")
      (function
        | "normal" -> Normal
        | "emphasize" -> Emphasize
        | "deemphasize" -> Deemphasize
        | _ -> failwith "Unknown Source_presentationHint_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ColumnDescriptor_type_enum = struct
  type t = String | Number | Boolean | UnixTimestampUTC

  let enc =
    let open Data_encoding in
    conv
      (function
        | String -> "string"
        | Number -> "number"
        | Boolean -> "boolean"
        | UnixTimestampUTC -> "unixTimestampUTC")
      (function
        | "string" -> String
        | "number" -> Number
        | "boolean" -> Boolean
        | "unixTimestampUTC" -> UnixTimestampUTC
        | _ -> failwith "Unknown ColumnDescriptor_type_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ModuleEvent_body_reason_enum = struct
  type t = New | Changed | Removed

  let enc =
    let open Data_encoding in
    conv
      (function New -> "new" | Changed -> "changed" | Removed -> "removed")
      (function
        | "new" -> New
        | "changed" -> Changed
        | "removed" -> Removed
        | _ -> failwith "Unknown ModuleEvent_body_reason_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module VariablePresentationHint_visibility = struct
  type t = Public | Private | Protected | Internal | Final

  let enc =
    let open Data_encoding in
    conv
      (function
        | Public -> "public"
        | Private -> "private"
        | Protected -> "protected"
        | Internal -> "internal"
        | Final -> "final")
      (function
        | "public" -> Public
        | "private" -> Private
        | "protected" -> Protected
        | "internal" -> Internal
        | "final" -> Final
        | _ -> failwith "Unknown VariablePresentationHint_visibility")
      string
end

(* WARN autogenerated - do not modify by hand *)

module DataBreakpointAccessType_enum = struct
  type t = Read | Write | ReadWrite

  let enc =
    let open Data_encoding in
    conv
      (function Read -> "read" | Write -> "write" | ReadWrite -> "readWrite")
      (function
        | "read" -> Read
        | "write" -> Write
        | "readWrite" -> ReadWrite
        | _ -> failwith "Unknown DataBreakpointAccessType_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module VariablePresentationHint_attributes = struct
  type t =
    | Static
    | Constant
    | ReadOnly
    | RawString
    | HasObjectId
    | CanHaveObjectId
    | HasSideEffects
    | HasDataBreakpoint

  let enc =
    let open Data_encoding in
    conv
      (function
        | Static -> "static"
        | Constant -> "constant"
        | ReadOnly -> "readOnly"
        | RawString -> "rawString"
        | HasObjectId -> "hasObjectId"
        | CanHaveObjectId -> "canHaveObjectId"
        | HasSideEffects -> "hasSideEffects"
        | HasDataBreakpoint -> "hasDataBreakpoint")
      (function
        | "static" -> Static
        | "constant" -> Constant
        | "readOnly" -> ReadOnly
        | "rawString" -> RawString
        | "hasObjectId" -> HasObjectId
        | "canHaveObjectId" -> CanHaveObjectId
        | "hasSideEffects" -> HasSideEffects
        | "hasDataBreakpoint" -> HasDataBreakpoint
        | _ -> failwith "Unknown VariablePresentationHint_attributes")
      string
end

(* WARN autogenerated - do not modify by hand *)

module CompletionItemType_enum = struct
  type t =
    | Method
    | Function
    | Constructor
    | Field
    | Variable
    | Class
    | Interface
    | Module
    | Property
    | Unit
    | Value
    | Enum
    | Keyword
    | Snippet
    | Text
    | Color
    | File
    | Reference
    | Customcolor

  let enc =
    let open Data_encoding in
    conv
      (function
        | Method -> "method"
        | Function -> "function"
        | Constructor -> "constructor"
        | Field -> "field"
        | Variable -> "variable"
        | Class -> "class"
        | Interface -> "interface"
        | Module -> "module"
        | Property -> "property"
        | Unit -> "unit"
        | Value -> "value"
        | Enum -> "enum"
        | Keyword -> "keyword"
        | Snippet -> "snippet"
        | Text -> "text"
        | Color -> "color"
        | File -> "file"
        | Reference -> "reference"
        | Customcolor -> "customcolor")
      (function
        | "method" -> Method
        | "function" -> Function
        | "constructor" -> Constructor
        | "field" -> Field
        | "variable" -> Variable
        | "class" -> Class
        | "interface" -> Interface
        | "module" -> Module
        | "property" -> Property
        | "unit" -> Unit
        | "value" -> Value
        | "enum" -> Enum
        | "keyword" -> Keyword
        | "snippet" -> Snippet
        | "text" -> Text
        | "color" -> Color
        | "file" -> File
        | "reference" -> Reference
        | "customcolor" -> Customcolor
        | _ -> failwith "Unknown CompletionItemType_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module OutputEvent_body_group_enum = struct
  type t = Start | StartCollapsed | End

  let enc =
    let open Data_encoding in
    conv
      (function
        | Start -> "start" | StartCollapsed -> "startCollapsed" | End -> "end")
      (function
        | "start" -> Start
        | "startCollapsed" -> StartCollapsed
        | "end" -> End
        | _ -> failwith "Unknown OutputEvent_body_group_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module VariablePresentationHint_kind = struct
  type t =
    | Property
    | Method
    | Class
    | Data
    | Event
    | BaseClass
    | InnerClass
    | Interface
    | MostDerivedClass
    | Virtual
    | DataBreakpoint

  let enc =
    let open Data_encoding in
    conv
      (function
        | Property -> "property"
        | Method -> "method"
        | Class -> "class"
        | Data -> "data"
        | Event -> "event"
        | BaseClass -> "baseClass"
        | InnerClass -> "innerClass"
        | Interface -> "interface"
        | MostDerivedClass -> "mostDerivedClass"
        | Virtual -> "virtual"
        | DataBreakpoint -> "dataBreakpoint")
      (function
        | "property" -> Property
        | "method" -> Method
        | "class" -> Class
        | "data" -> Data
        | "event" -> Event
        | "baseClass" -> BaseClass
        | "innerClass" -> InnerClass
        | "interface" -> Interface
        | "mostDerivedClass" -> MostDerivedClass
        | "virtual" -> Virtual
        | "dataBreakpoint" -> DataBreakpoint
        | _ -> failwith "Unknown VariablePresentationHint_kind")
      string
end

(* WARN autogenerated - do not modify by hand *)

module InitializeRequestArguments_pathFormat = struct
  type t = Path | Uri

  let enc =
    let open Data_encoding in
    conv
      (function Path -> "path" | Uri -> "uri")
      (function
        | "path" -> Path
        | "uri" -> Uri
        | _ -> failwith "Unknown InitializeRequestArguments_pathFormat")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ExceptionBreakMode_enum = struct
  type t = Never | Always | Unhandled | UserUnhandled

  let enc =
    let open Data_encoding in
    conv
      (function
        | Never -> "never"
        | Always -> "always"
        | Unhandled -> "unhandled"
        | UserUnhandled -> "userUnhandled")
      (function
        | "never" -> Never
        | "always" -> Always
        | "unhandled" -> Unhandled
        | "userUnhandled" -> UserUnhandled
        | _ -> failwith "Unknown ExceptionBreakMode_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ProtocolMessage_type = struct
  type t = Request | Response | Event

  let enc =
    let open Data_encoding in
    conv
      (function
        | Request -> "request" | Response -> "response" | Event -> "event")
      (function
        | "request" -> Request
        | "response" -> Response
        | "event" -> Event
        | _ -> failwith "Unknown ProtocolMessage_type")
      string
end

(* WARN autogenerated - do not modify by hand *)

module InvalidatedAreas = struct
  type t = All | Stacks | Threads | Variables

  let enc =
    let open Data_encoding in
    conv
      (function
        | All -> "all"
        | Stacks -> "stacks"
        | Threads -> "threads"
        | Variables -> "variables")
      (function
        | "all" -> All
        | "stacks" -> Stacks
        | "threads" -> Threads
        | "variables" -> Variables
        | _ -> failwith "Unknown InvalidatedAreas")
      string
end

(* WARN autogenerated - do not modify by hand *)

module Command_enum = struct
  type t =
    | Disassemble
    | WriteMemory
    | ReadMemory
    | ExceptionInfo
    | Completions
    | GotoTargets
    | StepInTargets
    | SetExpression
    | Evaluate
    | LoadedSources
    | Modules
    | TerminateThreads
    | Threads
    | Source
    | SetVariable
    | Variables
    | Scopes
    | StackTrace
    | Pause
    | Goto
    | RestartFrame
    | ReverseContinue
    | StepBack
    | StepOut
    | StepIn
    | Next
    | Continue
    | SetInstructionBreakpoints
    | SetDataBreakpoints
    | DataBreakpointInfo
    | SetExceptionBreakpoints
    | SetFunctionBreakpoints
    | SetBreakpoints
    | BreakpointLocations
    | Terminate
    | Disconnect
    | Restart
    | Attach
    | Launch
    | ConfigurationDone
    | Initialize
    | RunInTerminal
    | Cancel

  let enc =
    let open Data_encoding in
    conv
      (function
        | Disassemble -> "disassemble"
        | WriteMemory -> "writeMemory"
        | ReadMemory -> "readMemory"
        | ExceptionInfo -> "exceptionInfo"
        | Completions -> "completions"
        | GotoTargets -> "gotoTargets"
        | StepInTargets -> "stepInTargets"
        | SetExpression -> "setExpression"
        | Evaluate -> "evaluate"
        | LoadedSources -> "loadedSources"
        | Modules -> "modules"
        | TerminateThreads -> "terminateThreads"
        | Threads -> "threads"
        | Source -> "source"
        | SetVariable -> "setVariable"
        | Variables -> "variables"
        | Scopes -> "scopes"
        | StackTrace -> "stackTrace"
        | Pause -> "pause"
        | Goto -> "goto"
        | RestartFrame -> "restartFrame"
        | ReverseContinue -> "reverseContinue"
        | StepBack -> "stepBack"
        | StepOut -> "stepOut"
        | StepIn -> "stepIn"
        | Next -> "next"
        | Continue -> "continue"
        | SetInstructionBreakpoints -> "setInstructionBreakpoints"
        | SetDataBreakpoints -> "setDataBreakpoints"
        | DataBreakpointInfo -> "dataBreakpointInfo"
        | SetExceptionBreakpoints -> "setExceptionBreakpoints"
        | SetFunctionBreakpoints -> "setFunctionBreakpoints"
        | SetBreakpoints -> "setBreakpoints"
        | BreakpointLocations -> "breakpointLocations"
        | Terminate -> "terminate"
        | Disconnect -> "disconnect"
        | Restart -> "restart"
        | Attach -> "attach"
        | Launch -> "launch"
        | ConfigurationDone -> "configurationDone"
        | Initialize -> "initialize"
        | RunInTerminal -> "runInTerminal"
        | Cancel -> "cancel")
      (function
        | "disassemble" -> Disassemble
        | "writeMemory" -> WriteMemory
        | "readMemory" -> ReadMemory
        | "exceptionInfo" -> ExceptionInfo
        | "completions" -> Completions
        | "gotoTargets" -> GotoTargets
        | "stepInTargets" -> StepInTargets
        | "setExpression" -> SetExpression
        | "evaluate" -> Evaluate
        | "loadedSources" -> LoadedSources
        | "modules" -> Modules
        | "terminateThreads" -> TerminateThreads
        | "threads" -> Threads
        | "source" -> Source
        | "setVariable" -> SetVariable
        | "variables" -> Variables
        | "scopes" -> Scopes
        | "stackTrace" -> StackTrace
        | "pause" -> Pause
        | "goto" -> Goto
        | "restartFrame" -> RestartFrame
        | "reverseContinue" -> ReverseContinue
        | "stepBack" -> StepBack
        | "stepOut" -> StepOut
        | "stepIn" -> StepIn
        | "next" -> Next
        | "continue" -> Continue
        | "setInstructionBreakpoints" -> SetInstructionBreakpoints
        | "setDataBreakpoints" -> SetDataBreakpoints
        | "dataBreakpointInfo" -> DataBreakpointInfo
        | "setExceptionBreakpoints" -> SetExceptionBreakpoints
        | "setFunctionBreakpoints" -> SetFunctionBreakpoints
        | "setBreakpoints" -> SetBreakpoints
        | "breakpointLocations" -> BreakpointLocations
        | "terminate" -> Terminate
        | "disconnect" -> Disconnect
        | "restart" -> Restart
        | "attach" -> Attach
        | "launch" -> Launch
        | "configurationDone" -> ConfigurationDone
        | "initialize" -> Initialize
        | "runInTerminal" -> RunInTerminal
        | "cancel" -> Cancel
        | _ -> failwith "Unknown Command_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module RunInTerminalRequestArguments_kind_enum = struct
  type t = Integrated | External

  let enc =
    let open Data_encoding in
    conv
      (function Integrated -> "integrated" | External -> "external")
      (function
        | "integrated" -> Integrated
        | "external" -> External
        | _ -> failwith "Unknown RunInTerminalRequestArguments_kind_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ProcessEvent_body_startMethod_enum = struct
  type t = Launch | Attach | AttachForSuspendedLaunch

  let enc =
    let open Data_encoding in
    conv
      (function
        | Launch -> "launch"
        | Attach -> "attach"
        | AttachForSuspendedLaunch -> "attachForSuspendedLaunch")
      (function
        | "launch" -> Launch
        | "attach" -> Attach
        | "attachForSuspendedLaunch" -> AttachForSuspendedLaunch
        | _ -> failwith "Unknown ProcessEvent_body_startMethod_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module SteppingGranularity_enum = struct
  type t = Statement | Line | Instruction

  let enc =
    let open Data_encoding in
    conv
      (function
        | Statement -> "statement"
        | Line -> "line"
        | Instruction -> "instruction")
      (function
        | "statement" -> Statement
        | "line" -> Line
        | "instruction" -> Instruction
        | _ -> failwith "Unknown SteppingGranularity_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module BreakpointEvent_body_reason = struct
  type t = Changed | New | Removed

  let enc =
    let open Data_encoding in
    conv
      (function Changed -> "changed" | New -> "new" | Removed -> "removed")
      (function
        | "changed" -> Changed
        | "new" -> New
        | "removed" -> Removed
        | _ -> failwith "Unknown BreakpointEvent_body_reason")
      string
end

(* WARN autogenerated - do not modify by hand *)

module StackFrame_presentationHint_enum = struct
  type t = Normal | Label | Subtle

  let enc =
    let open Data_encoding in
    conv
      (function Normal -> "normal" | Label -> "label" | Subtle -> "subtle")
      (function
        | "normal" -> Normal
        | "label" -> Label
        | "subtle" -> Subtle
        | _ -> failwith "Unknown StackFrame_presentationHint_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module StoppedEvent_body_reason = struct
  type t =
    | Step
    | Breakpoint
    | Exception
    | Pause
    | Entry
    | Goto
    | Function_breakpoint
    | Data_breakpoint
    | Instruction_breakpoint

  let enc =
    let open Data_encoding in
    conv
      (function
        | Step -> "step"
        | Breakpoint -> "breakpoint"
        | Exception -> "exception"
        | Pause -> "pause"
        | Entry -> "entry"
        | Goto -> "goto"
        | Function_breakpoint -> "function breakpoint"
        | Data_breakpoint -> "data breakpoint"
        | Instruction_breakpoint -> "instruction breakpoint")
      (function
        | "step" -> Step
        | "breakpoint" -> Breakpoint
        | "exception" -> Exception
        | "pause" -> Pause
        | "entry" -> Entry
        | "goto" -> Goto
        | "function breakpoint" -> Function_breakpoint
        | "data breakpoint" -> Data_breakpoint
        | "instruction breakpoint" -> Instruction_breakpoint
        | _ -> failwith "Unknown StoppedEvent_body_reason")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ChecksumAlgorithm_enum = struct
  type t = MD5 | SHA1 | SHA256 | Timestamp

  let enc =
    let open Data_encoding in
    conv
      (function
        | MD5 -> "MD5"
        | SHA1 -> "SHA1"
        | SHA256 -> "SHA256"
        | Timestamp -> "timestamp")
      (function
        | "MD5" -> MD5
        | "SHA1" -> SHA1
        | "SHA256" -> SHA256
        | "timestamp" -> Timestamp
        | _ -> failwith "Unknown ChecksumAlgorithm_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module LoadedSourceEvent_body_reason_enum = struct
  type t = New | Changed | Removed

  let enc =
    let open Data_encoding in
    conv
      (function New -> "new" | Changed -> "changed" | Removed -> "removed")
      (function
        | "new" -> New
        | "changed" -> Changed
        | "removed" -> Removed
        | _ -> failwith "Unknown LoadedSourceEvent_body_reason_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module OutputEvent_body_category = struct
  type t = Console | Important | Stdout | Stderr | Telemetry

  let enc =
    let open Data_encoding in
    conv
      (function
        | Console -> "console"
        | Important -> "important"
        | Stdout -> "stdout"
        | Stderr -> "stderr"
        | Telemetry -> "telemetry")
      (function
        | "console" -> Console
        | "important" -> Important
        | "stdout" -> Stdout
        | "stderr" -> Stderr
        | "telemetry" -> Telemetry
        | _ -> failwith "Unknown OutputEvent_body_category")
      string
end

(* WARN autogenerated - do not modify by hand *)

module Event_enum = struct
  type t =
    | Memory
    | Invalidated
    | ProgressEnd
    | ProgressUpdate
    | ProgressStart
    | Capabilities
    | Process
    | LoadedSource
    | Module
    | Breakpoint
    | Output
    | Thread
    | Terminated
    | Exited
    | Continued
    | Stopped
    | Initialized

  let enc =
    let open Data_encoding in
    conv
      (function
        | Memory -> "memory"
        | Invalidated -> "invalidated"
        | ProgressEnd -> "progressEnd"
        | ProgressUpdate -> "progressUpdate"
        | ProgressStart -> "progressStart"
        | Capabilities -> "capabilities"
        | Process -> "process"
        | LoadedSource -> "loadedSource"
        | Module -> "module"
        | Breakpoint -> "breakpoint"
        | Output -> "output"
        | Thread -> "thread"
        | Terminated -> "terminated"
        | Exited -> "exited"
        | Continued -> "continued"
        | Stopped -> "stopped"
        | Initialized -> "initialized")
      (function
        | "memory" -> Memory
        | "invalidated" -> Invalidated
        | "progressEnd" -> ProgressEnd
        | "progressUpdate" -> ProgressUpdate
        | "progressStart" -> ProgressStart
        | "capabilities" -> Capabilities
        | "process" -> Process
        | "loadedSource" -> LoadedSource
        | "module" -> Module
        | "breakpoint" -> Breakpoint
        | "output" -> Output
        | "thread" -> Thread
        | "terminated" -> Terminated
        | "exited" -> Exited
        | "continued" -> Continued
        | "stopped" -> Stopped
        | "initialized" -> Initialized
        | _ -> failwith "Unknown Event_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module Scope_presentationHint = struct
  type t = Arguments | Locals | Registers

  let enc =
    let open Data_encoding in
    conv
      (function
        | Arguments -> "arguments"
        | Locals -> "locals"
        | Registers -> "registers")
      (function
        | "arguments" -> Arguments
        | "locals" -> Locals
        | "registers" -> Registers
        | _ -> failwith "Unknown Scope_presentationHint")
      string
end

(* WARN autogenerated - do not modify by hand *)

module EvaluateArguments_context = struct
  type t = Variables | Watch | Repl | Hover | Clipboard

  let enc =
    let open Data_encoding in
    conv
      (function
        | Variables -> "variables"
        | Watch -> "watch"
        | Repl -> "repl"
        | Hover -> "hover"
        | Clipboard -> "clipboard")
      (function
        | "variables" -> Variables
        | "watch" -> Watch
        | "repl" -> Repl
        | "hover" -> Hover
        | "clipboard" -> Clipboard
        | _ -> failwith "Unknown EvaluateArguments_context")
      string
end

(* WARN autogenerated - do not modify by hand *)

module VariablesArguments_filter_enum = struct
  type t = Indexed | Named

  let enc =
    let open Data_encoding in
    conv
      (function Indexed -> "indexed" | Named -> "named")
      (function
        | "indexed" -> Indexed
        | "named" -> Named
        | _ -> failwith "Unknown VariablesArguments_filter_enum")
      string
end

(* WARN autogenerated - do not modify by hand *)

module ThreadEvent_body_reason = struct
  type t = Started | Exited

  let enc =
    let open Data_encoding in
    conv
      (function Started -> "started" | Exited -> "exited")
      (function
        | "started" -> Started
        | "exited" -> Exited
        | _ -> failwith "Unknown ThreadEvent_body_reason")
      string
end
