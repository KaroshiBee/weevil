{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Debug Adapter Protocol",
  "description": "The Debug Adapter Protocol defines the protocol used between an editor or IDE and a debugger or runtime.",
  "type": "object",

  "definitions": {
    "ProtocolMessage": {
      "type": "object",
      "title": "Base Protocol",
      "description": "Base class of requests, responses, and events.",
      "properties": {
        "seq": {
          "type": "integer",
          "description": "Sequence number (also known as message ID). For protocol messages of type 'request' this ID can be used to cancel the request."
        },
        "type": {
          "type": "string",
          "description": "Message type.",
          "_enum": ["request", "response", "event"]
        }
      },
      "required": ["seq", "type"]
    },

    "Event": {
      "allOf": [
        { "$ref": "#/definitions/ProtocolMessage" },
        {
          "type": "object",
          "description": "A debug adapter initiated event.",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["event"]
            },
            "event": {
              "type": "string",
              "description": "Type of event."
            },
            "body": {
              "type": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
              ],
              "description": "Event-specific information."
            }
          },
          "required": ["type", "event"]
        }
      ]
    },
    "StoppedEvent": {
      "allOf": [
        { "$ref": "#/definitions/Event" },
        {
          "type": "object",
          "description": "The event indicates that the execution of the debuggee has stopped due to some condition.\nThis can be caused by a break point previously set, a stepping request has completed, by executing a debugger statement etc.",
          "properties": {
            "event": {
              "type": "string",
              "enum": ["stopped"]
            },
            "body": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason for the event.\nFor backward compatibility this string is shown in the UI if the 'description' attribute is missing (but it must not be translated).",
                  "_enum": [
                    "step",
                    "breakpoint",
                    "exception",
                    "pause",
                    "entry",
                    "goto",
                    "function breakpoint",
                    "data breakpoint",
                    "instruction breakpoint"
                  ]
                },
                "description": {
                  "type": "string",
                  "description": "The full reason for the event, e.g. 'Paused on exception'. This string is shown in the UI as is and must be translated."
                },
                "threadId": {
                  "type": "integer",
                  "description": "The thread which was stopped."
                },
                "preserveFocusHint": {
                  "type": "boolean",
                  "description": "A value of true hints to the client that this event should not change the focus."
                },
                "text": {
                  "type": "string",
                  "description": "Additional information. E.g. if reason is 'exception', text contains the exception name. This string is shown in the UI."
                },
                "allThreadsStopped": {
                  "type": "boolean",
                  "description": "If 'allThreadsStopped' is true, a debug adapter can announce that all threads have stopped.\n- The client should use this information to enable that all threads can be expanded to access their stacktraces.\n- If the attribute is missing or false, only the thread with the given threadId can be expanded."
                },
                "hitBreakpointIds": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Ids of the breakpoints that triggered the event. In most cases there will be only a single breakpoint but here are some examples for multiple breakpoints:\n- Different types of breakpoints map to the same location.\n- Multiple source breakpoints get collapsed to the same instruction by the compiler/runtime.\n- Multiple function breakpoints with different function names map to the same location."
                }
              },
              "required": ["reason"]
            }
          },
          "required": ["event", "body"]
        }
      ]
    }
  }
}
