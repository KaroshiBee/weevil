* NOtes from https://microsoft.github.io/debug-adapter-protocol/overview

* Stopping and accessing debuggee state

Whenever the program stops (on program entry, because a breakpoint was hit, an exception occurred, or the user requested execution to be paused), the debug adapter sends a stopped event with the appropriate reason and thread id.

Upon receipt, the development tool first requests the threads (see below) and then the stacktrace (a list of stack frames) for the thread mentioned in the stopped event. If the user then drills into the stack frame, the development tool first requests the scopes for a stack frame, and then the variables for a scope. If a variable is itself structured, the development tool requests its properties through additional variables requests. This leads to the following request waterfall:

** COMMENT we only have the one thread, so that can have id=1, then I think we just have a counter for everything else?
** COMMENT so we would need a tree for holding this info @ each step, the tree could be JSON values ?

Threads
   StackTrace
      Scopes
         Variables
            ...
               Variables

The value of variables can be modified through the setVariable request.


* Lifetime of Objects References

Some complex structural objects such as scopes or variables are not returned directly with their containers (stack frames, scopes, variables), but must be retrieved with separate scopes and variables requests based on object references. An object reference is an integer in the open interval (0, 231) assigned to objects by the debug adapter.

To simplify the management of object references in debug adapters, their lifetime is limited to the current suspended state. Once execution resumes, object references become invalid and DAP clients must not use them. When execution is paused again, object references no longer refer to the same objects. This means that a debug adapter can easily use sequentially assigned integers for different objects and reset the counter to 1 when execution resumes.

Please note that other object references like threadId do not have limited lifetime because that would prevent something like the pause request from working in the running state.


* Supporting threads

Whenever the generic debugger receives a stopped or a thread event, the development tool requests all threads that exist at that point in time. Thread events are optional, but a debug adapter can send them to force the development tool to update the threads UI dynamically even when not in a stopped state. If a debug adapter decides not to emit Thread events, the thread UI in the development tool will only update if a stopped event is received.

After a successful launch or attach, the development tool requests the baseline of currently existing threads with the threads request and then starts to listen for thread events to detect new or terminated threads. Even if a debug adapter does not support multiple threads, it must implement the threads request and return a single (dummy) thread. The thread id must be used in all requests which refer to a thread, e.g. stacktrace, pause, continue, next, stepIn, and stepOut.
