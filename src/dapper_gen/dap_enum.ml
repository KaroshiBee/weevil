
(* WARN autogenerated - do not modify by hand *)

module ProtocolMessage_type = struct
type t = | Request | Response | Event
let enc = 
let open Data_encoding in
conv
(function | Request -> "request" | Response -> "response" | Event -> "event")
(function | "request" -> Request | "response" -> Response | "event" -> Event | _ -> failwith "Unknown ProtocolMessage_type")
string
end

(* WARN autogenerated - do not modify by hand *)

module Command = struct
type t = | Error | Cancel | RunInTerminal | Initialize | ConfigurationDone | Launch | Attach | Restart | Disconnect | Terminate | BreakpointLocations | SetBreakpoints | SetFunctionBreakpoints | SetExceptionBreakpoints | DataBreakpointInfo | SetDataBreakpoints | SetInstructionBreakpoints | Continue | Next | StepIn | StepOut | StepBack | ReverseContinue | RestartFrame | Goto | Pause | StackTrace | Scopes | Variables | SetVariable | Source | Threads | TerminateThreads | Modules | LoadedSources | Evaluate | SetExpression | StepInTargets | GotoTargets | Completions | ExceptionInfo | ReadMemory | WriteMemory | Disassemble
let enc = 
let open Data_encoding in
conv
(function | Error -> "error" | Cancel -> "cancel" | RunInTerminal -> "runInTerminal" | Initialize -> "initialize" | ConfigurationDone -> "configurationDone" | Launch -> "launch" | Attach -> "attach" | Restart -> "restart" | Disconnect -> "disconnect" | Terminate -> "terminate" | BreakpointLocations -> "breakpointLocations" | SetBreakpoints -> "setBreakpoints" | SetFunctionBreakpoints -> "setFunctionBreakpoints" | SetExceptionBreakpoints -> "setExceptionBreakpoints" | DataBreakpointInfo -> "dataBreakpointInfo" | SetDataBreakpoints -> "setDataBreakpoints" | SetInstructionBreakpoints -> "setInstructionBreakpoints" | Continue -> "continue" | Next -> "next" | StepIn -> "stepIn" | StepOut -> "stepOut" | StepBack -> "stepBack" | ReverseContinue -> "reverseContinue" | RestartFrame -> "restartFrame" | Goto -> "goto" | Pause -> "pause" | StackTrace -> "stackTrace" | Scopes -> "scopes" | Variables -> "variables" | SetVariable -> "setVariable" | Source -> "source" | Threads -> "threads" | TerminateThreads -> "terminateThreads" | Modules -> "modules" | LoadedSources -> "loadedSources" | Evaluate -> "evaluate" | SetExpression -> "setExpression" | StepInTargets -> "stepInTargets" | GotoTargets -> "gotoTargets" | Completions -> "completions" | ExceptionInfo -> "exceptionInfo" | ReadMemory -> "readMemory" | WriteMemory -> "writeMemory" | Disassemble -> "disassemble")
(function | "error" -> Error | "cancel" -> Cancel | "runInTerminal" -> RunInTerminal | "initialize" -> Initialize | "configurationDone" -> ConfigurationDone | "launch" -> Launch | "attach" -> Attach | "restart" -> Restart | "disconnect" -> Disconnect | "terminate" -> Terminate | "breakpointLocations" -> BreakpointLocations | "setBreakpoints" -> SetBreakpoints | "setFunctionBreakpoints" -> SetFunctionBreakpoints | "setExceptionBreakpoints" -> SetExceptionBreakpoints | "dataBreakpointInfo" -> DataBreakpointInfo | "setDataBreakpoints" -> SetDataBreakpoints | "setInstructionBreakpoints" -> SetInstructionBreakpoints | "continue" -> Continue | "next" -> Next | "stepIn" -> StepIn | "stepOut" -> StepOut | "stepBack" -> StepBack | "reverseContinue" -> ReverseContinue | "restartFrame" -> RestartFrame | "goto" -> Goto | "pause" -> Pause | "stackTrace" -> StackTrace | "scopes" -> Scopes | "variables" -> Variables | "setVariable" -> SetVariable | "source" -> Source | "threads" -> Threads | "terminateThreads" -> TerminateThreads | "modules" -> Modules | "loadedSources" -> LoadedSources | "evaluate" -> Evaluate | "setExpression" -> SetExpression | "stepInTargets" -> StepInTargets | "gotoTargets" -> GotoTargets | "completions" -> Completions | "exceptionInfo" -> ExceptionInfo | "readMemory" -> ReadMemory | "writeMemory" -> WriteMemory | "disassemble" -> Disassemble | _ -> failwith "Unknown Command")
string
end

(* WARN autogenerated - do not modify by hand *)

module Event = struct
type t = | Initialized | Stopped | Continued | Exited | Terminated | Thread | Output | Breakpoint | Module_ | LoadedSource | Process | Capabilities | ProgressStart | ProgressUpdate | ProgressEnd | Invalidated | Memory
let enc = 
let open Data_encoding in
conv
(function | Initialized -> "initialized" | Stopped -> "stopped" | Continued -> "continued" | Exited -> "exited" | Terminated -> "terminated" | Thread -> "thread" | Output -> "output" | Breakpoint -> "breakpoint" | Module_ -> "module" | LoadedSource -> "loadedSource" | Process -> "process" | Capabilities -> "capabilities" | ProgressStart -> "progressStart" | ProgressUpdate -> "progressUpdate" | ProgressEnd -> "progressEnd" | Invalidated -> "invalidated" | Memory -> "memory")
(function | "initialized" -> Initialized | "stopped" -> Stopped | "continued" -> Continued | "exited" -> Exited | "terminated" -> Terminated | "thread" -> Thread | "output" -> Output | "breakpoint" -> Breakpoint | "module" -> Module_ | "loadedSource" -> LoadedSource | "process" -> Process | "capabilities" -> Capabilities | "progressStart" -> ProgressStart | "progressUpdate" -> ProgressUpdate | "progressEnd" -> ProgressEnd | "invalidated" -> Invalidated | "memory" -> Memory | _ -> failwith "Unknown Event")
string
end

(* WARN autogenerated - do not modify by hand *)

module ProcessEvent_1_body_startMethod = struct
type t = | Launch | Attach | AttachForSuspendedLaunch
let enc = 
let open Data_encoding in
conv
(function | Launch -> "launch" | Attach -> "attach" | AttachForSuspendedLaunch -> "attachForSuspendedLaunch")
(function | "launch" -> Launch | "attach" -> Attach | "attachForSuspendedLaunch" -> AttachForSuspendedLaunch | _ -> failwith "Unknown ProcessEvent_1_body_startMethod")
string
end

(* WARN autogenerated - do not modify by hand *)

module ChecksumAlgorithm = struct
type t = | MD5 | SHA1 | SHA256 | Timestamp
let enc = 
let open Data_encoding in
conv
(function | MD5 -> "MD5" | SHA1 -> "SHA1" | SHA256 -> "SHA256" | Timestamp -> "timestamp")
(function | "MD5" -> MD5 | "SHA1" -> SHA1 | "SHA256" -> SHA256 | "timestamp" -> Timestamp | _ -> failwith "Unknown ChecksumAlgorithm")
string
end

(* WARN autogenerated - do not modify by hand *)

module DataBreakpointAccessType = struct
type t = | Read | Write | ReadWrite
let enc = 
let open Data_encoding in
conv
(function | Read -> "read" | Write -> "write" | ReadWrite -> "readWrite")
(function | "read" -> Read | "write" -> Write | "readWrite" -> ReadWrite | _ -> failwith "Unknown DataBreakpointAccessType")
string
end

(* WARN autogenerated - do not modify by hand *)

module ModuleEvent_1_body_reason = struct
type t = | New | Changed | Removed
let enc = 
let open Data_encoding in
conv
(function | New -> "new" | Changed -> "changed" | Removed -> "removed")
(function | "new" -> New | "changed" -> Changed | "removed" -> Removed | _ -> failwith "Unknown ModuleEvent_1_body_reason")
string
end

(* WARN autogenerated - do not modify by hand *)

module StackFrame_presentationHint = struct
type t = | Normal | Label | Subtle
let enc = 
let open Data_encoding in
conv
(function | Normal -> "normal" | Label -> "label" | Subtle -> "subtle")
(function | "normal" -> Normal | "label" -> Label | "subtle" -> Subtle | _ -> failwith "Unknown StackFrame_presentationHint")
string
end

(* WARN autogenerated - do not modify by hand *)

module RunInTerminalRequestArguments_kind = struct
type t = | Integrated | External
let enc = 
let open Data_encoding in
conv
(function | Integrated -> "integrated" | External -> "external")
(function | "integrated" -> Integrated | "external" -> External | _ -> failwith "Unknown RunInTerminalRequestArguments_kind")
string
end

(* WARN autogenerated - do not modify by hand *)

module ColumnDescriptor_type = struct
type t = | String | Number | Boolean | UnixTimestampUTC
let enc = 
let open Data_encoding in
conv
(function | String -> "string" | Number -> "number" | Boolean -> "boolean" | UnixTimestampUTC -> "unixTimestampUTC")
(function | "string" -> String | "number" -> Number | "boolean" -> Boolean | "unixTimestampUTC" -> UnixTimestampUTC | _ -> failwith "Unknown ColumnDescriptor_type")
string
end

(* WARN autogenerated - do not modify by hand *)

module ExceptionBreakMode = struct
type t = | Never | Always | Unhandled | UserUnhandled
let enc = 
let open Data_encoding in
conv
(function | Never -> "never" | Always -> "always" | Unhandled -> "unhandled" | UserUnhandled -> "userUnhandled")
(function | "never" -> Never | "always" -> Always | "unhandled" -> Unhandled | "userUnhandled" -> UserUnhandled | _ -> failwith "Unknown ExceptionBreakMode")
string
end

(* WARN autogenerated - do not modify by hand *)

module VariablesArguments_filter = struct
type t = | Indexed | Named
let enc = 
let open Data_encoding in
conv
(function | Indexed -> "indexed" | Named -> "named")
(function | "indexed" -> Indexed | "named" -> Named | _ -> failwith "Unknown VariablesArguments_filter")
string
end

(* WARN autogenerated - do not modify by hand *)

module LoadedSourceEvent_1_body_reason = struct
type t = | New | Changed | Removed
let enc = 
let open Data_encoding in
conv
(function | New -> "new" | Changed -> "changed" | Removed -> "removed")
(function | "new" -> New | "changed" -> Changed | "removed" -> Removed | _ -> failwith "Unknown LoadedSourceEvent_1_body_reason")
string
end

(* WARN autogenerated - do not modify by hand *)

module Source_presentationHint = struct
type t = | Normal | Emphasize | Deemphasize
let enc = 
let open Data_encoding in
conv
(function | Normal -> "normal" | Emphasize -> "emphasize" | Deemphasize -> "deemphasize")
(function | "normal" -> Normal | "emphasize" -> Emphasize | "deemphasize" -> Deemphasize | _ -> failwith "Unknown Source_presentationHint")
string
end

(* WARN autogenerated - do not modify by hand *)

module SteppingGranularity = struct
type t = | Statement | Line | Instruction
let enc = 
let open Data_encoding in
conv
(function | Statement -> "statement" | Line -> "line" | Instruction -> "instruction")
(function | "statement" -> Statement | "line" -> Line | "instruction" -> Instruction | _ -> failwith "Unknown SteppingGranularity")
string
end

(* WARN autogenerated - do not modify by hand *)

module OutputEvent_1_body_group = struct
type t = | Start | StartCollapsed | End
let enc = 
let open Data_encoding in
conv
(function | Start -> "start" | StartCollapsed -> "startCollapsed" | End -> "end")
(function | "start" -> Start | "startCollapsed" -> StartCollapsed | "end" -> End | _ -> failwith "Unknown OutputEvent_1_body_group")
string
end

(* WARN autogenerated - do not modify by hand *)

module CompletionItemType = struct
type t = | Method | Function | Constructor | Field | Variable | Class | Interface | Module_ | Property | Unit | Value | Enum | Keyword | Snippet | Text | Color | File | Reference | Customcolor
let enc = 
let open Data_encoding in
conv
(function | Method -> "method" | Function -> "function" | Constructor -> "constructor" | Field -> "field" | Variable -> "variable" | Class -> "class" | Interface -> "interface" | Module_ -> "module" | Property -> "property" | Unit -> "unit" | Value -> "value" | Enum -> "enum" | Keyword -> "keyword" | Snippet -> "snippet" | Text -> "text" | Color -> "color" | File -> "file" | Reference -> "reference" | Customcolor -> "customcolor")
(function | "method" -> Method | "function" -> Function | "constructor" -> Constructor | "field" -> Field | "variable" -> Variable | "class" -> Class | "interface" -> Interface | "module" -> Module_ | "property" -> Property | "unit" -> Unit | "value" -> Value | "enum" -> Enum | "keyword" -> Keyword | "snippet" -> Snippet | "text" -> Text | "color" -> Color | "file" -> File | "reference" -> Reference | "customcolor" -> Customcolor | _ -> failwith "Unknown CompletionItemType")
string
end

(* WARN autogenerated - do not modify by hand *)

module VariablePresentationHint_visibility = struct
type t = | Public | Private | Protected | Internal | Final | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Public -> "public" | Private -> "private" | Protected -> "protected" | Internal -> "internal" | Final -> "final" | Other s -> s)
(function | "public" -> Public | "private" -> Private | "protected" -> Protected | "internal" -> Internal | "final" -> Final | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module BreakpointEvent_1_body_reason = struct
type t = | Changed | New | Removed | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Changed -> "changed" | New -> "new" | Removed -> "removed" | Other s -> s)
(function | "changed" -> Changed | "new" -> New | "removed" -> Removed | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module OutputEvent_1_body_category = struct
type t = | Console | Important | Stdout | Stderr | Telemetry | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Console -> "console" | Important -> "important" | Stdout -> "stdout" | Stderr -> "stderr" | Telemetry -> "telemetry" | Other s -> s)
(function | "console" -> Console | "important" -> Important | "stdout" -> Stdout | "stderr" -> Stderr | "telemetry" -> Telemetry | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module VariablePresentationHint_kind = struct
type t = | Property | Method | Class | Data | Event | BaseClass | InnerClass | Interface | MostDerivedClass | Virtual | DataBreakpoint | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Property -> "property" | Method -> "method" | Class -> "class" | Data -> "data" | Event -> "event" | BaseClass -> "baseClass" | InnerClass -> "innerClass" | Interface -> "interface" | MostDerivedClass -> "mostDerivedClass" | Virtual -> "virtual" | DataBreakpoint -> "dataBreakpoint" | Other s -> s)
(function | "property" -> Property | "method" -> Method | "class" -> Class | "data" -> Data | "event" -> Event | "baseClass" -> BaseClass | "innerClass" -> InnerClass | "interface" -> Interface | "mostDerivedClass" -> MostDerivedClass | "virtual" -> Virtual | "dataBreakpoint" -> DataBreakpoint | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module EvaluateArguments_context = struct
type t = | Variables | Watch | Repl | Hover | Clipboard | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Variables -> "variables" | Watch -> "watch" | Repl -> "repl" | Hover -> "hover" | Clipboard -> "clipboard" | Other s -> s)
(function | "variables" -> Variables | "watch" -> Watch | "repl" -> Repl | "hover" -> Hover | "clipboard" -> Clipboard | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module InvalidatedAreas = struct
type t = | All | Stacks | Threads | Variables | Other of string 
let enc = 
let open Data_encoding in
conv
(function | All -> "all" | Stacks -> "stacks" | Threads -> "threads" | Variables -> "variables" | Other s -> s)
(function | "all" -> All | "stacks" -> Stacks | "threads" -> Threads | "variables" -> Variables | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module ThreadEvent_1_body_reason = struct
type t = | Started | Exited | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Started -> "started" | Exited -> "exited" | Other s -> s)
(function | "started" -> Started | "exited" -> Exited | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module InitializeRequestArguments_pathFormat = struct
type t = | Path | Uri | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Path -> "path" | Uri -> "uri" | Other s -> s)
(function | "path" -> Path | "uri" -> Uri | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module StoppedEvent_1_body_reason = struct
type t = | Step | Breakpoint | Exception | Pause | Entry | Goto | Function_breakpoint | Data_breakpoint | Instruction_breakpoint | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Step -> "step" | Breakpoint -> "breakpoint" | Exception -> "exception" | Pause -> "pause" | Entry -> "entry" | Goto -> "goto" | Function_breakpoint -> "function breakpoint" | Data_breakpoint -> "data breakpoint" | Instruction_breakpoint -> "instruction breakpoint" | Other s -> s)
(function | "step" -> Step | "breakpoint" -> Breakpoint | "exception" -> Exception | "pause" -> Pause | "entry" -> Entry | "goto" -> Goto | "function breakpoint" -> Function_breakpoint | "data breakpoint" -> Data_breakpoint | "instruction breakpoint" -> Instruction_breakpoint | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module Scope_presentationHint = struct
type t = | Arguments | Locals | Registers | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Arguments -> "arguments" | Locals -> "locals" | Registers -> "registers" | Other s -> s)
(function | "arguments" -> Arguments | "locals" -> Locals | "registers" -> Registers | _ as s -> Other s)
string
end

(* WARN autogenerated - do not modify by hand *)

module VariablePresentationHint_attributes = struct
type t = | Static | Constant | ReadOnly | RawString | HasObjectId | CanHaveObjectId | HasSideEffects | HasDataBreakpoint | Other of string 
let enc = 
let open Data_encoding in
conv
(function | Static -> "static" | Constant -> "constant" | ReadOnly -> "readOnly" | RawString -> "rawString" | HasObjectId -> "hasObjectId" | CanHaveObjectId -> "canHaveObjectId" | HasSideEffects -> "hasSideEffects" | HasDataBreakpoint -> "hasDataBreakpoint" | Other s -> s)
(function | "static" -> Static | "constant" -> Constant | "readOnly" -> ReadOnly | "rawString" -> RawString | "hasObjectId" -> HasObjectId | "canHaveObjectId" -> CanHaveObjectId | "hasSideEffects" -> HasSideEffects | "hasDataBreakpoint" -> HasDataBreakpoint | _ as s -> Other s)
string
end
