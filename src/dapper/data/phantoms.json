{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Debug Adapter Protocol",
  "description": "The Debug Adapter Protocol defines the protocol used between an editor or IDE and a debugger or runtime.",
  "type": "object",

  "definitions": {
    "ProtocolMessage": {
      "type": "object",
      "title": "Base Protocol",
      "description": "Base class of requests, responses, and events.",
      "properties": {
        "seq": {
          "type": "integer",
          "description": "Sequence number (also known as message ID). For protocol messages of type 'request' this ID can be used to cancel the request."
        },
        "type": {
          "type": "string",
          "description": "Message type.",
          "_enum": ["request", "response", "event"]
        }
      },
      "required": ["seq", "type"]
    },

    "Request": {
      "allOf": [
        { "$ref": "#/definitions/ProtocolMessage" },
        {
          "type": "object",
          "description": "A client or debug adapter initiated request.",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["request"]
            },
            "command": {
              "type": "string",
              "description": "The command to execute."
            },
            "arguments": {
              "type": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
              ],
              "description": "Object containing arguments for the command."
            }
          },
          "required": ["type", "command"]
        }
      ]
    },

    "Event": {
      "allOf": [
        { "$ref": "#/definitions/ProtocolMessage" },
        {
          "type": "object",
          "description": "A debug adapter initiated event.",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["event"]
            },
            "event": {
              "type": "string",
              "description": "Type of event."
            },
            "body": {
              "type": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
              ],
              "description": "Event-specific information."
            }
          },
          "required": ["type", "event"]
        }
      ]
    },

    "Response": {
      "allOf": [
        { "$ref": "#/definitions/ProtocolMessage" },
        {
          "type": "object",
          "description": "Response for a request.",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["response"]
            },
            "request_seq": {
              "type": "integer",
              "description": "Sequence number of the corresponding request."
            },
            "success": {
              "type": "boolean",
              "description": "Outcome of the request.\nIf true, the request was successful and the 'body' attribute may contain the result of the request.\nIf the value is false, the attribute 'message' contains the error in short form and the 'body' may contain additional information (see 'ErrorResponse.body.error')."
            },
            "command": {
              "type": "string",
              "description": "The command requested."
            },
            "message": {
              "type": "string",
              "description": "Contains the raw error in short form if 'success' is false.\nThis raw error might be interpreted by the client and is not shown in the UI.\nSome predefined values exist.",
              "_enum": ["cancelled"],
              "enumDescriptions": ["request was cancelled."]
            },
            "body": {
              "type": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
              ],
              "description": "Contains request result if success is true and optional error details if success is false."
            }
          },
          "required": ["type", "request_seq", "success", "command"]
        }
      ]
    },

    "ErrorResponse": {
      "allOf": [
        { "$ref": "#/definitions/Response" },
        {
          "type": "object",
          "description": "On error (whenever 'success' is false), the body can provide more details.",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "error": {
                  "$ref": "#/definitions/Message",
                  "description": "An optional, structured error message."
                }
              }
            }
          },
          "required": ["body"]
        }
      ]
    },

    "CancelRequest": {
      "allOf": [
        { "$ref": "#/definitions/Request" },
        {
          "type": "object",
          "description": "The 'cancel' request is used by the client in two situations:\n- to indicate that it is no longer interested in the result produced by a specific request issued earlier\n- to cancel a progress sequence. Clients should only call this request if the capability 'supportsCancelRequest' is true.\nThis request has a hint characteristic: a debug adapter can only be expected to make a 'best effort' in honouring this request but there are no guarantees.\nThe 'cancel' request may return an error if it could not cancel an operation but a client should refrain from presenting this error to end users.\nA client should only call this request if the capability 'supportsCancelRequest' is true.\nThe request that got cancelled still needs to send a response back. This can either be a normal result ('success' attribute true) or an error response ('success' attribute false and the 'message' set to 'cancelled').\nReturning partial results from a cancelled request is possible but please note that a client has no generic way for detecting that a response is partial or not.\nThe progress that got cancelled still needs to send a 'progressEnd' event back.\n A client should not assume that progress just got cancelled after sending the 'cancel' request.",
          "properties": {
            "command": {
              "type": "string",
              "enum": ["cancel"]
            },
            "arguments": {
              "$ref": "#/definitions/CancelArguments"
            }
          },
          "required": ["command"]
        }
      ]
    },
    "CancelArguments": {
      "type": "object",
      "description": "Arguments for 'cancel' request.",
      "properties": {
        "requestId": {
          "type": "integer",
          "description": "The ID (attribute 'seq') of the request to cancel. If missing no request is cancelled.\nBoth a 'requestId' and a 'progressId' can be specified in one request."
        },
        "progressId": {
          "type": "string",
          "description": "The ID (attribute 'progressId') of the progress to cancel. If missing no progress is cancelled.\nBoth a 'requestId' and a 'progressId' can be specified in one request."
        }
      }
    },
    "CancelResponse": {
      "allOf": [
        { "$ref": "#/definitions/Response" },
        {
          "type": "object",
          "description": "Response to 'cancel' request. This is just an acknowledgement, so no body field is required."
        }
      ]
    },

    "Message": {
      "type": "object",
      "description": "A structured message object. Used to return errors from requests.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the message."
        },
        "format": {
          "type": "string",
          "description": "A format string for the message. Embedded variables have the form '{name}'.\nIf variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes."
        },
        "variables": {
          "type": "object",
          "description": "An object used as a dictionary for looking up the variables in the format string.",
          "additionalProperties": {
            "type": "string",
            "description": "Values must be strings."
          }
        },
        "sendTelemetry": {
          "type": "boolean",
          "description": "If true send to telemetry."
        },
        "showUser": {
          "type": "boolean",
          "description": "If true show user."
        },
        "url": {
          "type": "string",
          "description": "An optional url where additional information about this message can be found."
        },
        "urlLabel": {
          "type": "string",
          "description": "An optional label that is presented to the user as the UI for opening the url."
        }
      },
      "required": ["id", "format"]
    },

    "InitializedEvent": {
      "allOf": [
        { "$ref": "#/definitions/Event" },
        {
          "type": "object",
          "title": "Events",
          "description": "This event indicates that the debug adapter is ready to accept configuration requests (e.g. SetBreakpointsRequest, SetExceptionBreakpointsRequest).\nA debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the 'initialize' request has finished).\nThe sequence of events/requests is as follows:\n- adapters sends 'initialized' event (after the 'initialize' request has returned)\n- client sends zero or more 'setBreakpoints' requests\n- client sends one 'setFunctionBreakpoints' request (if capability 'supportsFunctionBreakpoints' is true)\n- client sends a 'setExceptionBreakpoints' request if one or more 'exceptionBreakpointFilters' have been defined (or if 'supportsConfigurationDoneRequest' is not true)\n- client sends other future configuration requests\n- client sends one 'configurationDone' request to indicate the end of the configuration.",
          "properties": {
            "event": {
              "type": "string",
              "enum": ["initialized"]
            }
          },
          "required": ["event"]
        }
      ]
    },

    "StoppedEvent": {
      "allOf": [
        { "$ref": "#/definitions/Event" },
        {
          "type": "object",
          "description": "The event indicates that the execution of the debuggee has stopped due to some condition.\nThis can be caused by a break point previously set, a stepping request has completed, by executing a debugger statement etc.",
          "properties": {
            "event": {
              "type": "string",
              "enum": ["stopped"]
            },
            "body": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason for the event.\nFor backward compatibility this string is shown in the UI if the 'description' attribute is missing (but it must not be translated).",
                  "_enum": [
                    "step",
                    "breakpoint",
                    "exception",
                    "pause",
                    "entry",
                    "goto",
                    "function breakpoint",
                    "data breakpoint",
                    "instruction breakpoint"
                  ]
                },
                "description": {
                  "type": "string",
                  "description": "The full reason for the event, e.g. 'Paused on exception'. This string is shown in the UI as is and must be translated."
                },
                "threadId": {
                  "type": "integer",
                  "description": "The thread which was stopped."
                },
                "preserveFocusHint": {
                  "type": "boolean",
                  "description": "A value of true hints to the client that this event should not change the focus."
                },
                "text": {
                  "type": "string",
                  "description": "Additional information. E.g. if reason is 'exception', text contains the exception name. This string is shown in the UI."
                },
                "allThreadsStopped": {
                  "type": "boolean",
                  "description": "If 'allThreadsStopped' is true, a debug adapter can announce that all threads have stopped.\n- The client should use this information to enable that all threads can be expanded to access their stacktraces.\n- If the attribute is missing or false, only the thread with the given threadId can be expanded."
                },
                "hitBreakpointIds": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Ids of the breakpoints that triggered the event. In most cases there will be only a single breakpoint but here are some examples for multiple breakpoints:\n- Different types of breakpoints map to the same location.\n- Multiple source breakpoints get collapsed to the same instruction by the compiler/runtime.\n- Multiple function breakpoints with different function names map to the same location."
                }
              },
              "required": ["reason"]
            }
          },
          "required": ["event", "body"]
        }
      ]
    },

    "ContinuedEvent": {
      "allOf": [
        { "$ref": "#/definitions/Event" },
        {
          "type": "object",
          "description": "The event indicates that the execution of the debuggee has continued.\nPlease note: a debug adapter is not expected to send this event in response to a request that implies that execution continues, e.g. 'launch' or 'continue'.\nIt is only necessary to send a 'continued' event if there was no previous request that implied this.",
          "properties": {
            "event": {
              "type": "string",
              "enum": ["continued"]
            },
            "body": {
              "type": "object",
              "properties": {
                "threadId": {
                  "type": "integer",
                  "description": "The thread which was continued."
                },
                "allThreadsContinued": {
                  "type": "boolean",
                  "description": "If 'allThreadsContinued' is true, a debug adapter can announce that all threads have continued."
                }
              },
              "required": ["threadId"]
            }
          },
          "required": ["event", "body"]
        }
      ]
    },

    "ExitedEvent": {
      "allOf": [
        { "$ref": "#/definitions/Event" },
        {
          "type": "object",
          "description": "The event indicates that the debuggee has exited and returns its exit code.",
          "properties": {
            "event": {
              "type": "string",
              "enum": ["exited"]
            },
            "body": {
              "type": "object",
              "properties": {
                "exitCode": {
                  "type": "integer",
                  "description": "The exit code returned from the debuggee."
                }
              },
              "required": ["exitCode"]
            }
          },
          "required": ["event", "body"]
        }
      ]
    },

    "TerminatedEvent": {
      "allOf": [
        { "$ref": "#/definitions/Event" },
        {
          "type": "object",
          "description": "The event indicates that debugging of the debuggee has terminated. This does **not** mean that the debuggee itself has exited.",
          "properties": {
            "event": {
              "type": "string",
              "enum": ["terminated"]
            },
            "body": {
              "type": "object",
              "properties": {
                "restart": {
                  "type": [
                    "array",
                    "boolean",
                    "integer",
                    "null",
                    "number",
                    "object",
                    "string"
                  ],
                  "description": "A debug adapter may set 'restart' to true (or to an arbitrary object) to request that the front end restarts the session.\nThe value is not interpreted by the client and passed unmodified as an attribute '__restart' to the 'launch' and 'attach' requests."
                }
              }
            }
          },
          "required": ["event"]
        }
      ]
    }
  }
}
