(* there are three message types: Request, Response, Event
   they all three have to conform to the ProtocolMessage spec
   which is having fields "seq" & "type",
   they also have their own additional specs,
   all types are auto-generated (enums, plain objects, Request/Response/Event message types etc)

   NOTE According to the spec

   - there are pairings that have to be observed (ie a NextResponse is a response to a NextRequest)

   - The arguments field of Requests can sometimes be optional,

   - The body field of Event and Response can sometimes be optional

   - The message field of Response is supposed to be an _enum
      but the spec only specifies "cancelled" as a suggestion
      and no-where is it used, so we keep it as a string option

   All Request/Response/Event message types are parameterised by three type parameters,
   the first type param is a phantom type for stating what kind of
   Request/Response it is (based on the Dap_command types) or what kind of
   Event it is (based on the Dap_event types).
   NOTE that Dap_command and Dap_event are auto-generated from the DAP schema.
   This first type param can be used to control pairings of request/responses.

   The second type param is just the type for the args (for requests) or body (for events and responses).

   The third type param is another phantom that allows to specify the kind of presence for the args/body,
   we use the name 'presence (which is a type req or opt)
   and define two sets of constructors:
   * enc & enc_opt - for constructing from json
   * make & make_opt for constructing in ocaml
   these make a phantom'd (_, _, req) & (_, _, opt) respectively.

   This then allows a uniform API of three main messaging modules and sigs:
   * ('command, 'args, 'presence) RequestMessage.t
   * ('command, 'body, 'presence) ResponseMessage.t
   * ('event, 'body, 'presence) EventMessage.t

   Finally, in the autogenerated Dap_message module, we define three GADT families with the shapes:
   * CtorsForRequests : ('command, 'args, 'presence) RequestMessage.t -> ('command, 'args, 'presence) request
   * CtorsForResponses : ('command, 'body, 'presence) ResponseMessage.t -> ('command, 'body, 'presence) response
   * CtorsForEvents : ('event, 'body, 'presence) EventMessage.t -> ('event, 'body, 'presence) event

   with constructors named after the various message objects defined in the json schema.

   NOTE the autogeneration takes care of assigning the correct phantoms for command/event and req/opt
   and so compiler errors should abound if one uses the wrong ctor function.

*)

module RequestMessage = Dap_request
module ResponseMessage = Dap_response
module EventMessage = Dap_event
